Map {
    .name: "PropertyContainer"
    
    //custom event that is triggered on a property change
    event onCreatedDynamic
    event onMultiCreatedDynamic
    event onRemovedDynamic 
    event onChanged
    event onStatusChanged
    
    //creates a new property and sets it up correctly. No new property event emitted
    function SetupProperty(name, typeID, group, documentation, status) {
    
        if (this.Has(name)) {
            throw "Property already exists"
        }
        
        var container = this
        var prop = this.New(name)
        
        prop.Init(typeID, group, documentation, status)    
        prop.onChanged.RegisterCallback(function() {
            container.onChanged.Emit(name)
        })
        prop.onStatusChanged.RegisterCallback(function(value) {
            container.onStatusChanged.Emit(name, value)  
        })
        
        return prop
    }
    
    function SetupProperties(names, infos) {
    
        for (i=0; i<names.length; i++) {
            
            var name = names[i]
            if (this.Has(name)) {
                throw "Property " + name + " already exists"
            }
            
            //setup
            var info = infos[i]
            this.SetupProperty(names[i], info["typeid"], info["group"], info["docu"], info["status"])
        }
    }
    
    function CreateDynamicProperty(name, typeID, group, documentation, status) {
        
        if (this.Has(name)) {
            throw "Property already exists"
        }
        
        //setup and inform!
        prop = this.SetupProperty(name, typeID, group, documentation, status)
        this.onCreatedDynamic.Emit(name, typeID, group, documentation, status)
        return prop
    }
    
    function CreateDynamicProperties(names, infos) {
        
        //setup and inform
        this.SetupProperties(names, infos)
        this.onMultiCreatedDynamic.Emit(names, infos)
    }
    
    function RemoveDynamicProperty(name) {
        
        this.Remove(name)
        this.onRemovedDynamic.Emit(name)
    }
    
    function SetValues(props, values) {
    
        for (var i=0; i<props.length; i++) {
            
            var prop = props[i]
            if (!this.Has(prop)) {
                throw "Property " + prop + " does not exist"
            }
            
            var obj = this.Get(prop)
            obj.SetValue(values[i])
        }
    }
    
    function SetStatus(props, values) {
    
        for (var i=0; i<props.length; i++) {
            
            var prop = props[i]
            if (!this.Has(prop)) {
                throw "Property " + prop + " does not exist"
            }
            
            var obj = this.Get(prop)
            obj.status = values[i]
        }
    }
    
    .key: string
    .value: Data {
        
        .name: "Property"

        //FreeCAD infos
        property string typeid
        property string group
        property string documentation
        property string status
        property bool   isDefault
        
        event onStatusChanged
        
        event onChanged: function() {
            if (this.isDefault) {
                this.isDefault = false
            }    
        }
        
        .status.onChanged: function(value) {
            if (this.typeid != "") {
                this.onStatusChanged.Emit(value)
            }
        }
               
        Variant {
            .name: "PropertyData"
            
            .onValueChanged: function() {
                if (this.parent.typeid != "") {
                    this.parent.onChanged.Emit()
                }
            }
            
            //by default the property type is binary
            .type:  Raw {
                        .name: "raw"
                        
                        property object prop
                        
                        .onDataChanged: function(cid) {
                            this.prop.onChanged.Emit()
                        }
                    }
        }
        
        function Init(typeID, group, documentation, status) {          

            switch(typeID) {
                case "App::PropertyLink":
                case "App::PropertyLinkChild":
                case "App::PropertyLinkGlobal":
                    this.PropertyData.type = DataType("string")
                    break           
                
                case "App::PropertyFloat":
                case "App::PropertyPrecision":
                case "App::PropertyQuantity":
                case "App::PropertyAngle":
                case "App::PropertyDistance":
                case "App::PropertyLength":
                case "App::PropertyArea":
                case "App::PropertyVolume":
                case "App::PropertySpeed":
                case "App::PropertyAcceleration":
                case "App::PropertyForce":
                case "App::PropertyPressure":
                    this.PropertyData.type = DataType("float")
                    break
                    
                case "App::PropertyInteger":
                case "App::PropertyPercent":
                    this.PropertyData.type = DataType("int")
                    break
                    
                case "App::PropertyBool":
                    this.PropertyData.type = DataType("bool")
                    break
                    
                case "App::PropertyPath":
                case "App::PropertyString":
                case "App::PropertyUUID":
                case "App::PropertyExpressionEngine":
                    this.PropertyData.type = DataType("string")
                    break  
                    
                default:
                    //default is a Raw data property. For this we set the property 
                    //object to make sure it can be called for the updates
                    this.PropertyData.GetValue().prop = this
            }
            
            //do this after assigning the variant as we use this as indicator for 
            //finished initialization
            this.status = status
            this.typeid = typeID
            this.group = group
            this.documentation = documentation
            this.isDefault = true
        }
        
        function SetValue(value) {
            if (!this.IsBinary()) {
                this.PropertyData.SetValue(value)
            }
            else {
                //should be a CID for binary data
                this.PropertyData.GetValue().Set(value)
            }
        }
        
        const function GetValue() {

            if (!this.IsBinary()) {
                return this.PropertyData.GetValue()
            }
            else {
                //should be a CID for binary data
                return this.PropertyData.GetValue().Get()
            }
        }
        
        const function IsBinary() {
            return !this.PropertyData.type.IsPOD()
        }
        
        const function GetInfo() {
            var dict = {
                "id": this.typeid,
                "group": this.group,
                "docu": this.documentation,
                "status": this.status
            }

            return dict
        }
        /*
        Transaction {
            .name: "trans"
            
            //when added to transaction the data object needs to be added too
            .onParticipation: function() {                    
                Transaction.Add(this.parent.PropertyData)
            }
        }*/
    }
    /*
    //we take part in transactions
    Transaction {
        .name: "transaction"
      
        //make sure all properties are added to the same transaction as this container
        function DependendObjects() {
            
            var keys = this.parent.Keys()
            var result = []
            for(var i=0; i<keys.length; i++) {
                var prop = this.parent.Get(keys[i])
                result.push(prop)
                
                if (prop.IsBinary()) {
                    result.push(prop.GetValue())
                }                
            }
            return result
        }
    }*/
}

/* Remaining default Properties (excluding modules and gui):
App::PropertyLists
App::PropertyBoolList
App::PropertyFloatList
App::PropertyFloatConstraint
App::PropertyQuantityConstraint
App::PropertyIntegerConstraint
App::PropertyEnumeration
App::PropertyIntegerList
App::PropertyIntegerSet
App::PropertyMap
App::PropertyFont
App::PropertyStringList
App::PropertyLinkList
App::PropertyLinkListChild
App::PropertyLinkListGlobal
App::PropertyLinkSub
App::PropertyLinkSubChild
App::PropertyLinkSubGlobal
App::PropertyLinkSubList
App::PropertyLinkSubListChild
App::PropertyLinkSubListGlobal
App::PropertyMatrix
App::PropertyVector
App::PropertyVectorDistance
App::PropertyPosition
App::PropertyDirection
App::PropertyVectorList
App::PropertyPlacement
App::PropertyPlacementList
App::PropertyPlacementLink
App::PropertyGeometry
App::PropertyComplexGeoData
App::PropertyColor
App::PropertyColorList
App::PropertyMaterial
App::PropertyMaterialList
App::PropertyFile
App::PropertyFileIncluded
App::PropertyPythonObject
*/
