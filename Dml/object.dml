import "property.dml" as PropertyContainer

Map {
    .name: "ObjectContainer"
    
    event onObjectCreated(string, string)           //name + typeid
    event onObjectRemoved(string)                   //name
    event onObjectPropertyChanged(string, string)   //obj name, property name
    event onObjectDynamicPropertyCreated(string, string)   //obj name, property name
    event onObjectDynamicPropertyRemoved(string, string)   //obj name, property name
    
    function NewObject(name, typeid) {
    
        if (this.Has(name)) {
            throw "Name already taken"
        }        
        
        var container = this
        var obj = container.New(name)
        
        obj.typeid = typeid
        obj.onChangedProperty.RegisterCallback(function(prop) {
            container.onObjectPropertyChanged.Emit(name, prop)
        })
        obj.onCreatedDynamicProperty.RegisterCallback(function(prop) {
            container.onObjectDynamicPropertyCreated.Emit(name, prop)
        })
        obj.onRemovedDynamicProperty.RegisterCallback(function(prop) {
            container.onObjectDynamicPropertyRemoved(name, prop)
        })
        
        container.onObjectCreated.Emit(name, typeid)
        return obj
    }
    
    function RemoveObject(name) {
        
        this.Remove(name)
        this.onObjectRemoved.Emit(name)
    }   
    
    .key: string
    .value: Data {
        
        .name: "Object"
        
        property string typeid
        
        event onChangedProperty(string)
        event onCreatedDynamicProperty(string)
        event onRemovedDynamicProperty(string)
        
        PropertyContainer {
            .name: "Properties"
            
            .onChangedProperty: function(name) {
                this.parent.onChangedProperty.Emit(name)
            }
            
            .onCreatedDynamicProperty: function(name) {
                this.parent.onCreatedDynamicProperty.Emit(name)
            }
            
            .onRemovedDynamicProperty: function(name) {
                this.parent.onRemovedDynamicProperty.Emit(name)
            }
        } 
    }
}
