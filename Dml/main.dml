import "objectmap.dml" as ObjectContainer
import "property.dml" as PropertyContainer

Data {
    .name: "Document"
    
    /* Document Properties */
    PropertyContainer {
        .name: "Properties"
    }
    
    /* Document Objects */
    ObjectContainer {
        .name: "Objects"
    }
    
    /* View Providers */
    ObjectContainer {
        .name: "ViewProviders"
    }    
    
    /* FreeCAD interdependencies is defined via the dependency graph. It could theoretically be build from all
     * Properties, as FreeCAD does itself, however, this is complicated. It requires knowledge over all link 
     * properties as well as expressions. To ease this we just recreate the FreeCAD DAG by the available info 
     * from FreeCAD document objects 
     */
    Graph {        
        .name: "DAG"
        .node: string
        .edge: none
        .directed: true
        
        //sets the FreeCAD outlist of a document object (list of object names)
        function SetObjectOutList(obj, list) {
            
            //the FreeCAD outlist gives us the graph children. For dependencies the object depends
            //on the out list objects. Hence in our graph we add edges from outlist object to obj.
            
            //remove all edges that are currently there but not in the list
            var edges = this.ToNode(obj)
            var remove = this.subtract(edges, list)
            for(var i=0; i<remove.length; i++) {
                this.RemoveEdgeBetween(remove[i], obj)
            }
            
            //add all edges that are in the list but not available
            var add = this.subtract(list, edges)
            for(var i=0; i<add.length; i++) {
                this.NewEdge(add[i], obj)
            }
        }
        
        //gets the FreeCAD outlist of a document object (list of object names)
        const function GetObjectOutList(name) {
            return this.ToNode(name)
        }
        
        //gets the FreeCAD inlist of a document object (list of object names)
        const function GetObjectInlist(name) {
            return this.FromNode(name)
        }
        
        //returns all objects, that depend on the given one (list of objects)
        const function GetDependentObjects(obj) {
            names = this.ReachableNodes(obj.name)
            var objs = []
            for(var i=0; i<names.length; i++) {
                objs.push(Document.Objects.Get(names[i]))
            }
            return objs
        }
        
        //helper function: return the first array without elements from the second
        const function subtract(base, remove) {

            for( var i=base.length - 1; i>=0; i--){
                
                for( var j=0; j<remove.length; j++){
                    
                    if(base[i] && (base[i] === remove[j])){
                        base.splice(i, 1);
                    }
                }
            }
            
            return base
        }
    }
    
    //mainly required for testing purposes
    event sync
}
